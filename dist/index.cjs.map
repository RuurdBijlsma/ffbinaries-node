{"version":3,"sources":["../src/index.ts","../src/utils.ts"],"sourcesContent":["import { downloadFile, exists, fetchJson } from \"./utils.js\";\r\nimport path from \"path\";\r\nimport os from \"os\";\r\nimport extractZip from \"extract-zip\";\r\nimport fs from \"fs/promises\";\r\n\r\nconst API_URL = `https://ffbinaries.com/api/v1`;\r\n\r\nexport async function downloadBinaries(\r\n  {\r\n      destination = \".\",\r\n      components = [\"ffmpeg\", \"ffprobe\", \"ffplay\"],\r\n      version = \"latest\",\r\n      overwrite = false,\r\n      onProgress = () => {\r\n      },\r\n      tempDirectory = destination\r\n  }: {\r\n      destination?: string,\r\n      components?: (\"ffmpeg\" | \"ffprobe\" | \"ffplay\")[],\r\n      version?: string,\r\n      overwrite?: boolean,\r\n      onProgress?: (x: number) => void,\r\n      tempDirectory?: string\r\n  }\r\n) {\r\n    let componentData = components.map(c => ({\r\n        component: c,\r\n        filePath: path.resolve(path.join(destination, getBinaryFilename(c))),\r\n        zipPath: path.resolve(path.join(tempDirectory, `${c}.zip`)),\r\n        tempFilePath: path.resolve(path.join(tempDirectory, getBinaryFilename(c)))\r\n    }));\r\n    let missingComponents = [];\r\n    for (let data of componentData) {\r\n        if (!overwrite && await exists(data.filePath))\r\n            continue;\r\n        missingComponents.push(data);\r\n    }\r\n\r\n    let versionData = await getVersionData(version);\r\n    let platform = detectPlatform();\r\n    if (!versionData[\"bin\"].hasOwnProperty(platform))\r\n        throw new Error(\"Got invalid json from ffbinaries api\");\r\n\r\n    let urls = versionData[\"bin\"][platform];\r\n    console.log({ urls, missingComponents });\r\n    let validComponents = missingComponents.filter(c => urls.hasOwnProperty(c.component));\r\n\r\n    let progresses = validComponents.map(() => 0);\r\n    let progressFn = (p: { progress: number }, index: number) => {\r\n        progresses[index] = p.progress;\r\n        onProgress(\r\n          progresses.reduce((acc, v) => acc + v) / progresses.length\r\n        );\r\n    };\r\n    await Promise.all(\r\n      validComponents.map(async (data, index) => {\r\n          await downloadFile(\r\n            urls[data.component],\r\n            data.zipPath,\r\n            p => progressFn(p, index)\r\n          );\r\n          await extractZip(data.zipPath, {\r\n              dir: path.resolve(tempDirectory)\r\n          });\r\n          await fs.unlink(data.zipPath);\r\n          await fs.rename(data.tempFilePath, data.filePath);\r\n      })\r\n    );\r\n\r\n    return Object.fromEntries(componentData\r\n      .filter(c => urls.hasOwnProperty(c.component))\r\n      .map(data => [data.component, data.filePath]));\r\n}\r\n\r\nexport function getVersionData(version: string) {\r\n    return fetchJson<{\r\n        version: string,\r\n        bin: { [key: string]: { [key: string]: string } }\r\n    }>(API_URL + \"/version/\" + version);\r\n}\r\n\r\nexport async function listVersions() {\r\n    return Object.keys(\r\n      (await fetchJson<{ [key: string]: string }>(API_URL)).versions\r\n    );\r\n}\r\n\r\nexport async function listPlatforms() {\r\n    return [\"osx-64\", \"linux-32\", \"linux-64\", \"linux-armel\", \"linux-armhf\", \"windows-32\", \"windows-64\"];\r\n}\r\n\r\nexport function detectPlatform() {\r\n    const type = os.type().toLowerCase();\r\n    const arch = os.arch().toLowerCase();\r\n\r\n    if (type === \"darwin\") {\r\n        return \"osx-64\";\r\n    }\r\n\r\n    if (type === \"windows_nt\") {\r\n        return arch === \"x64\" ? \"windows-64\" : \"windows-32\";\r\n    }\r\n\r\n    if (type === \"linux\") {\r\n        if (arch === \"arm\" || arch === \"arm64\") {\r\n            return \"linux-armel\";\r\n        }\r\n        return arch === \"x64\" ? \"linux-64\" : \"linux-32\";\r\n    }\r\n\r\n    throw new Error(\"Could not detect platform\");\r\n}\r\n\r\nexport function getBinaryFilename(component = \"ffmpeg\") {\r\n    return detectPlatform().startsWith(\"windows\") ? component + \".exe\" : component;\r\n}\r\n\r\n\r\nexport default {\r\n    detectPlatform,\r\n    listPlatforms,\r\n    listVersions,\r\n    getVersionData,\r\n    getBinaryFilename,\r\n    downloadBinaries\r\n};\r\n","import fs from \"fs\";\nimport { finished } from \"stream/promises\";\nimport fetch from \"node-fetch\";\n// @ts-ignore\nimport Progress from \"node-fetch-progress\";\n\nexport async function exists(file: string) {\n    try {\n        await fs.promises.stat(file);\n        return true;\n    } catch {\n        return false;\n    }\n}\n\nexport async function downloadFile(url: string, file: string, onProgress = (_: { progress: number }) => {\n}) {\n    const response = await fetch(url);\n    if (!response.ok || response.body === null)\n        throw new Error(`Error reaching ffbinaries api: ${response.statusText}`);\n\n    const progress = new Progress(response, { throttle: 100 });\n    progress.on(\"progress\", onProgress);\n    const fileStream = fs.createWriteStream(file, { flags: \"w\" });\n    await finished(response.body.pipe(fileStream));\n}\n\nexport async function fetchJson<T>(url: string) {\n    let response = await fetch(url);\n    if (!response.ok)\n        throw new Error(`Error reaching ffbinaries api: ${response.statusText}`);\n\n    let result = await response.text();\n    try {\n        return JSON.parse(result) as T;\n    } catch (e) {\n        throw new Error(`Couldn't parse result from ffbinaries api: ${result}`);\n    }\n}\n"],"mappings":"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","names":["fs","fetch","Progress","import_promises","path","extractZip","fs","os"]}